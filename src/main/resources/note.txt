1. 数据结构/算法的
    （a）复杂度分析（b）来历 (c)是什么（d）为什么 (e) 应用场景


2. 10种常用，基本的数据结构 + 10种算法。


3. 复杂度分析
    （1）为什么要复杂度分析？来历？
       （a) 事后统计法依赖环境和数据规模。不需要数据，就可以粗略估计算法执行效率的方法。

     (2) 大O时间复杂度特点
        (a) 代码执行时间随数据规模增长的变化趋势。
        (b) 加法法则：T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) = O(max(f(n), g(n)))
        (c) 乘法法则: T(n)=T1(n)*T2(n)=O(f(n))*O(g(n))=O(f(n)*g(n))

     (3) 空间复杂度特点
         (a)算法的存储空间随数据规模增长的变化趋势。

     (4) 复杂度比较：O(1) < O(logn) < O(n) < O(nlogn) < O(n^2)

     (5) 最好时间复杂度
       （a）在最理想情况下的时间复杂度。

     (6) 最坏时间复杂度
        (a) 在最糟糕情况下的时间复杂度。

     (7) 平均时间复杂度
        (a) 期望值

     (8) 均摊时间复杂度


4. 数组
    (1) 是什么 ？什么是数组？
         (a) 线性表 -- 只有前后两个方向。
         (b) 连续的内存空间和相同的数据类型 -- 根据下表随机访问。时间复杂度 O(1)。
         (c) 插入 - 怎么插入？ 在k位置插入，k~n 向后移动 平均时间复杂度 O(n)。怎么提高性能 ？在k位插入，将k位移动到n+1位置，时间复杂度O(1)。
         (d) 删除 - 平均时间复杂度O(n) 怎么提高性能？标记删除算法 mark-sweep。

    (2) 为什么？数组 vs 容器
         （a）优点：存储基本类型， 没有autoboxing, unboxing, 性能first。
          (b)缺点: 但需要手动扩容。

    (3) 使用场景： 性能优先-写框架，底层开发（jdk）


5. 链表
    (1) 是什么？什么是链表？
          (a) 线性表
          (b) 零散内存块(节点) + 指针（下一个节点地址）
          (c) 查找 - O(n)
          (d) 插入 - 时间复杂度 O(1)

    (2) 是什么？单链表
          (a) 删除 - O(n)，先要找到要删除的位置(这部分O(n)),然后再删除（这部分O(1)）
          (b)

    (2) 循环单链表？
         （a）是什么?   尾结点指向链表头部的单链表
          (b) 为什么？  链尾到链条很方便
          (c) 使用场景？ 处理数据具有环形结构时

    (3) 双向链表？
           (a) 前驱指针 + 后驱指针
           (b) 删除 - O(n)
           (c)






